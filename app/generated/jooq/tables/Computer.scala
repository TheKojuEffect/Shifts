/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Indexes
import generated.jooq.Keys
import generated.jooq.Public
import generated.jooq.tables.records.ComputerRecord

import java.lang.Class
import java.lang.Long
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Computer {

  /**
   * The reference instance of <code>public.computer</code>
   */
  val COMPUTER = new Computer
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  ),
  comments = "This class is generated by jOOQ"
)
class Computer(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, ComputerRecord],
  aliased : Table[ComputerRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[ComputerRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[ComputerRecord] = {
    classOf[ComputerRecord]
  }

  /**
   * The column <code>public.computer.id</code>.
   */
  val ID : TableField[ComputerRecord, Long] = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.computer.name</code>.
   */
  val NAME : TableField[ComputerRecord, String] = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), "")

  /**
   * The column <code>public.computer.introduced</code>.
   */
  val INTRODUCED : TableField[ComputerRecord, Timestamp] = createField(DSL.name("introduced"), org.jooq.impl.SQLDataType.TIMESTAMP, "")

  /**
   * The column <code>public.computer.discontinued</code>.
   */
  val DISCONTINUED : TableField[ComputerRecord, Timestamp] = createField(DSL.name("discontinued"), org.jooq.impl.SQLDataType.TIMESTAMP, "")

  /**
   * The column <code>public.computer.company_id</code>.
   */
  val COMPANY_ID : TableField[ComputerRecord, Long] = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.BIGINT, "")

  /**
   * Create a <code>public.computer</code> table reference
   */
  def this() = {
    this(DSL.name("computer"), null, null, null, null)
  }

  /**
   * Create an aliased <code>public.computer</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, generated.jooq.tables.Computer.COMPUTER, null)
  }

  /**
   * Create an aliased <code>public.computer</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, generated.jooq.tables.Computer.COMPUTER, null)
  }

  private def this(alias : Name, aliased : Table[ComputerRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, ComputerRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, generated.jooq.tables.Computer.COMPUTER, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.IX_COMPUTER_COMPANY_1, Indexes.PK_COMPUTER)
  }

  override def getPrimaryKey : UniqueKey[ComputerRecord] = {
    Keys.PK_COMPUTER
  }

  override def getKeys : List[ UniqueKey[ComputerRecord] ] = {
    return Arrays.asList[ UniqueKey[ComputerRecord] ](Keys.PK_COMPUTER)
  }

  override def getReferences : List[ ForeignKey[ComputerRecord, _] ] = {
    return Arrays.asList[ ForeignKey[ComputerRecord, _] ](Keys.COMPUTER__FK_COMPUTER_COMPANY_1)
  }

  def company : Company = {
    return new Company(this, Keys.COMPUTER__FK_COMPUTER_COMPANY_1)
  }

  override def as(alias : String) : Computer = {
    new Computer(DSL.name(alias), this)
  }

  override def as(alias : Name) : Computer = {
    new Computer(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Computer = {
    new Computer(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Computer = {
    new Computer(name, null)
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  override def fieldsRow : Row5[Long, String, Timestamp, Timestamp, Long] = {
    super.fieldsRow.asInstanceOf[ Row5[Long, String, Timestamp, Timestamp, Long] ]
  }
}
